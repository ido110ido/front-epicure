{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const orderSlice = createSlice({\n  name: \"order\",\n  initialState: {\n    user: null,\n    value: []\n  },\n  reducers: {\n    addDishToOrder: (state, action) => {\n      const isSameRestaurant = state.value.every(dish => dish.restaurantId === action.payload.restaurantId) || state.value.length === 0;\n      if (isSameRestaurant) {\n        state.value = [...state.value, action.payload];\n      } else {\n        throw new Error(\"Not the same restaurant\");\n      }\n    },\n    cleanOrder: state => {\n      state.value = [];\n    },\n    userLoggedIn: (state, action) => {\n      if (state.user === null) {\n        state.user = action.payload;\n      }\n    },\n    userLoggedOut: state => {\n      state.user = null;\n    }\n  }\n});\nexport const {\n  addDishToOrder,\n  cleanOrder,\n  userLoggedIn,\n  userLoggedOut\n} = orderSlice.actions;\nexport default orderSlice.reducer;","map":{"version":3,"names":["createSlice","orderSlice","name","initialState","user","value","reducers","addDishToOrder","state","action","isSameRestaurant","every","dish","restaurantId","payload","length","Error","cleanOrder","userLoggedIn","userLoggedOut","actions","reducer"],"sources":["C:/Users/User/OneDrive/שולחן העבודה/full stack curse/epicure/front/src/data/orderSlicer.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { IDishOrder } from \"../component/Types/Interfaces/IDishCard\";\r\nimport { IUsers } from \"../component/Types/Interfaces/IUser\";\r\n\r\nexport interface IOrderState {\r\n  user: IUsers | null;\r\n  value: IDishOrder[];\r\n}\r\n\r\nexport const orderSlice = createSlice({\r\n  name: \"order\",\r\n  initialState: {\r\n    user: null,\r\n    value: [],\r\n  } as IOrderState,\r\n  reducers: {\r\n    addDishToOrder: (\r\n      state: { value: IDishOrder[] },\r\n      action: { payload: IDishOrder }\r\n    ) => {\r\n      const isSameRestaurant =\r\n        state.value.every(\r\n          (dish) => dish.restaurantId === action.payload.restaurantId\r\n        ) || state.value.length === 0;\r\n\r\n      if (isSameRestaurant) {\r\n        state.value = [...state.value, action.payload];\r\n      } else {\r\n        throw new Error(\"Not the same restaurant\");\r\n      }\r\n    },\r\n    cleanOrder: (state: { value: IDishOrder[] }) => {\r\n      state.value = [];\r\n    },\r\n    userLoggedIn: (state, action: { payload: IUsers }) => {\r\n      if (state.user === null) {\r\n        state.user = action.payload;\r\n      }\r\n    },\r\n    userLoggedOut: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addDishToOrder, cleanOrder, userLoggedIn, userLoggedOut } =\r\n  orderSlice.actions;\r\n\r\nexport default orderSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAS9C,OAAO,MAAMC,UAAU,GAAGD,WAAW,CAAC;EACpCE,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE;EACT,CAAgB;EAChBC,QAAQ,EAAE;IACRC,cAAc,EAAE,CACdC,KAA8B,EAC9BC,MAA+B,KAC5B;MACH,MAAMC,gBAAgB,GACpBF,KAAK,CAACH,KAAK,CAACM,KAAK,CACdC,IAAI,IAAKA,IAAI,CAACC,YAAY,KAAKJ,MAAM,CAACK,OAAO,CAACD,YAAY,CAC5D,IAAIL,KAAK,CAACH,KAAK,CAACU,MAAM,KAAK,CAAC;MAE/B,IAAIL,gBAAgB,EAAE;QACpBF,KAAK,CAACH,KAAK,GAAG,CAAC,GAAGG,KAAK,CAACH,KAAK,EAAEI,MAAM,CAACK,OAAO,CAAC;MAChD,CAAC,MAAM;QACL,MAAM,IAAIE,KAAK,CAAC,yBAAyB,CAAC;MAC5C;IACF,CAAC;IACDC,UAAU,EAAGT,KAA8B,IAAK;MAC9CA,KAAK,CAACH,KAAK,GAAG,EAAE;IAClB,CAAC;IACDa,YAAY,EAAE,CAACV,KAAK,EAAEC,MAA2B,KAAK;MACpD,IAAID,KAAK,CAACJ,IAAI,KAAK,IAAI,EAAE;QACvBI,KAAK,CAACJ,IAAI,GAAGK,MAAM,CAACK,OAAO;MAC7B;IACF,CAAC;IACDK,aAAa,EAAGX,KAAK,IAAK;MACxBA,KAAK,CAACJ,IAAI,GAAG,IAAI;IACnB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEG,cAAc;EAAEU,UAAU;EAAEC,YAAY;EAAEC;AAAc,CAAC,GACtElB,UAAU,CAACmB,OAAO;AAEpB,eAAenB,UAAU,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}