{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport data from \"./resturants.json\";\nconst yearInMilliseconds = 31536000000;\nconst getChefsData = async () => {\n  return await fetch(\"http://localhost:8000/chefs\").then(response => response.json()).then(data => {\n    console.log(data);\n    return data.data;\n  }).catch(error => {\n    console.error(\"Error getting chefs data:\", error);\n  });\n};\nconst chefsData = await getChefsData();\nexport const chefSlice = createSlice({\n  name: \"chef\",\n  initialState: {\n    value: [],\n    chefName: \"\",\n    singleChef: {}\n  },\n  reducers: {\n    allChefs: state => {\n      state.value = chefsData;\n    },\n    popularChefs: state => {\n      state.value = chefsData.sort((a, b) => a.visited - b.visited);\n    },\n    newChefs: state => {\n      const currentDate = new Date().getTime();\n      state.value = chefsData.filter(e => {\n        return new Date(e.startDate).getTime() > currentDate - yearInMilliseconds * 5;\n      });\n    },\n    getChefName: (state, action) => {\n      const temp = chefsData.find(e => e._id === action.payload);\n      state.chefName = (temp === null || temp === void 0 ? void 0 : temp.firstName) + \" \" + (temp === null || temp === void 0 ? void 0 : temp.lastName);\n    },\n    getChefOfTheWeek: state => {\n      const chefOfTheWeek = state.chefsData.find(e => e._id === data.chefOfTheWeek);\n      if (chefOfTheWeek) {\n        state.singleChef = chefOfTheWeek;\n      }\n    }\n  }\n});\nexport const {\n  allChefs,\n  popularChefs,\n  newChefs,\n  getChefName,\n  getChefOfTheWeek\n} = chefSlice.actions;\nexport default chefSlice.reducer;","map":{"version":3,"names":["createSlice","data","yearInMilliseconds","getChefsData","fetch","then","response","json","console","log","catch","error","chefsData","chefSlice","name","initialState","value","chefName","singleChef","reducers","allChefs","state","popularChefs","sort","a","b","visited","newChefs","currentDate","Date","getTime","filter","e","startDate","getChefName","action","temp","find","_id","payload","firstName","lastName","getChefOfTheWeek","chefOfTheWeek","actions","reducer"],"sources":["C:/Users/User/OneDrive/שולחן העבודה/full stack curse/epicure/front/src/data/chefSlicer.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { IChef } from \"../component/Types/Interfaces/IChef\";\r\nimport data from \"./resturants.json\";\r\nconst yearInMilliseconds = 31536000000;\r\nexport interface IChefState {\r\n  value: IChef[];\r\n  chefName: string;\r\n  singleChef: IChef;\r\n}\r\nconst getChefsData = async () => {\r\n  return await fetch(\"http://localhost:8000/chefs\")\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      console.log(data);\r\n      return data.data;\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error getting chefs data:\", error);\r\n    });\r\n};\r\nconst chefsData: IChef[] = await getChefsData();\r\n\r\nexport const chefSlice = createSlice({\r\n  name: \"chef\",\r\n  initialState: {\r\n    value: [] as IChef[],\r\n    chefName: \"\",\r\n    singleChef: {},\r\n  } as IChefState,\r\n  reducers: {\r\n    allChefs: (state) => {\r\n      state.value = chefsData;\r\n    },\r\n    popularChefs: (state) => {\r\n      state.value = chefsData.sort((a, b) => a.visited - b.visited);\r\n    },\r\n    newChefs: (state) => {\r\n      const currentDate = new Date().getTime();\r\n      state.value = chefsData.filter((e) => {\r\n        return (\r\n          new Date(e.startDate).getTime() > currentDate - yearInMilliseconds * 5\r\n        );\r\n      });\r\n    },\r\n    getChefName: (state, action) => {\r\n      const temp = chefsData.find((e) => e._id === action.payload);\r\n      state.chefName = temp?.firstName + \" \" + temp?.lastName;\r\n    },\r\n    getChefOfTheWeek: (state) => {\r\n      const chefOfTheWeek = state.chefsData.find(\r\n        (e) => e._id === data.chefOfTheWeek\r\n      );\r\n      if (chefOfTheWeek) {\r\n        state.singleChef = chefOfTheWeek;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  allChefs,\r\n  popularChefs,\r\n  newChefs,\r\n  getChefName,\r\n  getChefOfTheWeek,\r\n} = chefSlice.actions;\r\n\r\nexport default chefSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,OAAOC,IAAI,MAAM,mBAAmB;AACpC,MAAMC,kBAAkB,GAAG,WAAW;AAMtC,MAAMC,YAAY,GAAG,YAAY;EAC/B,OAAO,MAAMC,KAAK,CAAC,6BAA6B,CAAC,CAC9CC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEJ,IAAI,IAAK;IACdO,OAAO,CAACC,GAAG,CAACR,IAAI,CAAC;IACjB,OAAOA,IAAI,CAACA,IAAI;EAClB,CAAC,CAAC,CACDS,KAAK,CAAEC,KAAK,IAAK;IAChBH,OAAO,CAACG,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;EACnD,CAAC,CAAC;AACN,CAAC;AACD,MAAMC,SAAkB,GAAG,MAAMT,YAAY,EAAE;AAE/C,OAAO,MAAMU,SAAS,GAAGb,WAAW,CAAC;EACnCc,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,KAAK,EAAE,EAAa;IACpBC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,CAAC;EACf,CAAe;EACfC,QAAQ,EAAE;IACRC,QAAQ,EAAGC,KAAK,IAAK;MACnBA,KAAK,CAACL,KAAK,GAAGJ,SAAS;IACzB,CAAC;IACDU,YAAY,EAAGD,KAAK,IAAK;MACvBA,KAAK,CAACL,KAAK,GAAGJ,SAAS,CAACW,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,OAAO,GAAGD,CAAC,CAACC,OAAO,CAAC;IAC/D,CAAC;IACDC,QAAQ,EAAGN,KAAK,IAAK;MACnB,MAAMO,WAAW,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;MACxCT,KAAK,CAACL,KAAK,GAAGJ,SAAS,CAACmB,MAAM,CAAEC,CAAC,IAAK;QACpC,OACE,IAAIH,IAAI,CAACG,CAAC,CAACC,SAAS,CAAC,CAACH,OAAO,EAAE,GAAGF,WAAW,GAAG1B,kBAAkB,GAAG,CAAC;MAE1E,CAAC,CAAC;IACJ,CAAC;IACDgC,WAAW,EAAE,CAACb,KAAK,EAAEc,MAAM,KAAK;MAC9B,MAAMC,IAAI,GAAGxB,SAAS,CAACyB,IAAI,CAAEL,CAAC,IAAKA,CAAC,CAACM,GAAG,KAAKH,MAAM,CAACI,OAAO,CAAC;MAC5DlB,KAAK,CAACJ,QAAQ,GAAG,CAAAmB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEI,SAAS,IAAG,GAAG,IAAGJ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,QAAQ;IACzD,CAAC;IACDC,gBAAgB,EAAGrB,KAAK,IAAK;MAC3B,MAAMsB,aAAa,GAAGtB,KAAK,CAACT,SAAS,CAACyB,IAAI,CACvCL,CAAC,IAAKA,CAAC,CAACM,GAAG,KAAKrC,IAAI,CAAC0C,aAAa,CACpC;MACD,IAAIA,aAAa,EAAE;QACjBtB,KAAK,CAACH,UAAU,GAAGyB,aAAa;MAClC;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXvB,QAAQ;EACRE,YAAY;EACZK,QAAQ;EACRO,WAAW;EACXQ;AACF,CAAC,GAAG7B,SAAS,CAAC+B,OAAO;AAErB,eAAe/B,SAAS,CAACgC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}