{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\\\u05E9\\u05D5\\u05DC\\u05D7\\u05DF \\u05D4\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4\\\\full stack curse\\\\epicure\\\\src\\\\component\\\\experiment\\\\slider.tsx\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useState, useRef } from \"react\";\nimport classnames from \"classnames\";\nimport \"./multiRangeSlider.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MultiRangeSlider = _ref => {\n  _s();\n  let {\n    min,\n    max,\n    onChange\n  } = _ref;\n  const [minVal, setMinVal] = useState(min);\n  const [maxVal, setMaxVal] = useState(max);\n  const minValRef = useRef(null);\n  const maxValRef = useRef(null);\n  const range = useRef(null);\n\n  // Convert to percentage\n  const getPercent = useCallback(value => Math.round((value - min) / (max - min) * 100), [min, max]);\n\n  // Set width of the range to decrease from the left side\n  useEffect(() => {\n    if (maxValRef.current) {\n      const minPercent = getPercent(minVal);\n      const maxPercent = getPercent(+maxValRef.current.value); // Precede with '+' to convert the value from type string to type number\n\n      if (range.current) {\n        range.current.style.left = `${minPercent}%`;\n        range.current.style.width = `${maxPercent - minPercent}%`;\n      }\n    }\n  }, [minVal, getPercent]);\n\n  // Set width of the range to decrease from the right side\n  useEffect(() => {\n    if (minValRef.current) {\n      const minPercent = getPercent(+minValRef.current.value);\n      const maxPercent = getPercent(maxVal);\n      if (range.current) {\n        range.current.style.width = `${maxPercent - minPercent}%`;\n      }\n    }\n  }, [maxVal, getPercent]);\n\n  // Get min and max values when their state changes\n  useEffect(() => {\n    onChange({\n      min: minVal,\n      max: maxVal\n    });\n  }, [minVal, maxVal, onChange]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: min,\n      max: max,\n      value: minVal,\n      ref: minValRef,\n      onChange: event => {\n        const value = Math.min(+event.target.value, maxVal - 1);\n        setMinVal(value);\n        event.target.value = value.toString();\n      },\n      className: classnames(\"thumb thumb--zindex-3\", {\n        \"thumb--zindex-5\": minVal > max - 100\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: min,\n      max: max,\n      value: maxVal,\n      ref: maxValRef,\n      onChange: event => {\n        const value = Math.max(+event.target.value, minVal + 1);\n        setMaxVal(value);\n        event.target.value = value.toString();\n      },\n      className: \"thumb thumb--zindex-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slider\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider__track\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: range,\n        className: \"slider__range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider__left-value\",\n        children: minVal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider__right-value\",\n        children: maxVal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(MultiRangeSlider, \"joEa1v1zaOhKGQUDNY+uJuhJ5cU=\");\n_c = MultiRangeSlider;\nexport default MultiRangeSlider;\nvar _c;\n$RefreshReg$(_c, \"MultiRangeSlider\");","map":{"version":3,"names":["useCallback","useEffect","useState","useRef","classnames","MultiRangeSlider","min","max","onChange","minVal","setMinVal","maxVal","setMaxVal","minValRef","maxValRef","range","getPercent","value","Math","round","current","minPercent","maxPercent","style","left","width","event","target","toString"],"sources":["C:/Users/User/OneDrive/שולחן העבודה/full stack curse/epicure/src/component/experiment/slider.tsx"],"sourcesContent":["import {\r\n  ChangeEvent,\r\n  FC,\r\n  useCallback,\r\n  useEffect,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport classnames from \"classnames\";\r\nimport \"./multiRangeSlider.css\";\r\n\r\ninterface MultiRangeSliderProps {\r\n  min: number;\r\n  max: number;\r\n  onChange: Function;\r\n}\r\n\r\nconst MultiRangeSlider: FC<MultiRangeSliderProps> = ({\r\n  min,\r\n  max,\r\n  onChange,\r\n}) => {\r\n  const [minVal, setMinVal] = useState(min);\r\n  const [maxVal, setMaxVal] = useState(max);\r\n  const minValRef = useRef<HTMLInputElement>(null);\r\n  const maxValRef = useRef<HTMLInputElement>(null);\r\n  const range = useRef<HTMLDivElement>(null);\r\n\r\n  // Convert to percentage\r\n  const getPercent = useCallback(\r\n    (value: number) => Math.round(((value - min) / (max - min)) * 100),\r\n    [min, max]\r\n  );\r\n\r\n  // Set width of the range to decrease from the left side\r\n  useEffect(() => {\r\n    if (maxValRef.current) {\r\n      const minPercent = getPercent(minVal);\r\n      const maxPercent = getPercent(+maxValRef.current.value); // Precede with '+' to convert the value from type string to type number\r\n\r\n      if (range.current) {\r\n        range.current.style.left = `${minPercent}%`;\r\n        range.current.style.width = `${maxPercent - minPercent}%`;\r\n      }\r\n    }\r\n  }, [minVal, getPercent]);\r\n\r\n  // Set width of the range to decrease from the right side\r\n  useEffect(() => {\r\n    if (minValRef.current) {\r\n      const minPercent = getPercent(+minValRef.current.value);\r\n      const maxPercent = getPercent(maxVal);\r\n\r\n      if (range.current) {\r\n        range.current.style.width = `${maxPercent - minPercent}%`;\r\n      }\r\n    }\r\n  }, [maxVal, getPercent]);\r\n\r\n  // Get min and max values when their state changes\r\n  useEffect(() => {\r\n    onChange({ min: minVal, max: maxVal });\r\n  }, [minVal, maxVal, onChange]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <input\r\n        type=\"range\"\r\n        min={min}\r\n        max={max}\r\n        value={minVal}\r\n        ref={minValRef}\r\n        onChange={(event: ChangeEvent<HTMLInputElement>) => {\r\n          const value = Math.min(+event.target.value, maxVal - 1);\r\n          setMinVal(value);\r\n          event.target.value = value.toString();\r\n        }}\r\n        className={classnames(\"thumb thumb--zindex-3\", {\r\n          \"thumb--zindex-5\": minVal > max - 100,\r\n        })}\r\n      />\r\n      <input\r\n        type=\"range\"\r\n        min={min}\r\n        max={max}\r\n        value={maxVal}\r\n        ref={maxValRef}\r\n        onChange={(event: ChangeEvent<HTMLInputElement>) => {\r\n          const value = Math.max(+event.target.value, minVal + 1);\r\n          setMaxVal(value);\r\n          event.target.value = value.toString();\r\n        }}\r\n        className=\"thumb thumb--zindex-4\"\r\n      />\r\n\r\n      <div className=\"slider\">\r\n        <div className=\"slider__track\"></div>\r\n        <div ref={range} className=\"slider__range\"></div>\r\n        <div className=\"slider__left-value\">{minVal}</div>\r\n        <div className=\"slider__right-value\">{maxVal}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MultiRangeSlider;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}