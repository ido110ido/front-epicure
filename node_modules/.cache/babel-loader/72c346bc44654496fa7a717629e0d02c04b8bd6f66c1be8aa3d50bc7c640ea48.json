{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const orderSlice = createSlice({\n  name: \"order\",\n  initialState: {\n    value: []\n  },\n  reducers: {\n    addDishToOrder: (state, action) => {\n      console.log(state.value);\n      console.log(action.payload);\n      if (state.value.every(dish => dish.restaurantId === action.payload.restaurantId) || state.value.length === 0) {\n        const existingDishIndex = state.value.findIndex(dish => dish._id === action.payload._id);\n        if (existingDishIndex > -1) {\n          state.value[existingDishIndex].amount += action.payload.amount;\n        } else {\n          let temp = state.value;\n          temp.push(action.payload);\n          state.value = temp;\n        }\n      } else {\n        throw Error(\"not the same restaurant\");\n      }\n    },\n    cleanOrder: state => {\n      state.value = [];\n    }\n  }\n});\nexport const {\n  addDishToOrder,\n  cleanOrder\n} = orderSlice.actions;\nexport default orderSlice.reducer;","map":{"version":3,"names":["createSlice","orderSlice","name","initialState","value","reducers","addDishToOrder","state","action","console","log","payload","every","dish","restaurantId","length","existingDishIndex","findIndex","_id","amount","temp","push","Error","cleanOrder","actions","reducer"],"sources":["C:/Users/User/OneDrive/שולחן העבודה/full stack curse/epicure/src/data/orderSlicer.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { IDish, IDishOrder } from \"../component/Types/Interfaces/IDishCard\";\r\nexport interface IOrderState {\r\n  value: IDishOrder[];\r\n}\r\nexport const orderSlice = createSlice({\r\n  name: \"order\",\r\n  initialState: {\r\n    value: [],\r\n  },\r\n  reducers: {\r\n    addDishToOrder: (\r\n      state: { value: IDishOrder[] },\r\n      action: { payload: IDishOrder }\r\n    ) => {\r\n      console.log(state.value);\r\n      console.log(action.payload);\r\n\r\n      if (\r\n        state.value.every(\r\n          (dish) => dish.restaurantId === action.payload.restaurantId\r\n        ) ||\r\n        state.value.length === 0\r\n      ) {\r\n        const existingDishIndex = state.value.findIndex(\r\n          (dish) => dish._id === action.payload._id\r\n        );\r\n        if (existingDishIndex > -1) {\r\n          state.value[existingDishIndex].amount += action.payload.amount;\r\n        } else {\r\n          let temp = state.value;\r\n          temp.push(action.payload);\r\n          state.value = temp;\r\n        }\r\n      } else {\r\n        throw Error(\"not the same restaurant\");\r\n      }\r\n    },\r\n    cleanOrder: (state: { value: IDish[] }) => {\r\n      state.value = [];\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addDishToOrder, cleanOrder } = orderSlice.actions;\r\n\r\nexport default orderSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAK9C,OAAO,MAAMC,UAAU,GAAGD,WAAW,CAAC;EACpCE,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACRC,cAAc,EAAE,CACdC,KAA8B,EAC9BC,MAA+B,KAC5B;MACHC,OAAO,CAACC,GAAG,CAACH,KAAK,CAACH,KAAK,CAAC;MACxBK,OAAO,CAACC,GAAG,CAACF,MAAM,CAACG,OAAO,CAAC;MAE3B,IACEJ,KAAK,CAACH,KAAK,CAACQ,KAAK,CACdC,IAAI,IAAKA,IAAI,CAACC,YAAY,KAAKN,MAAM,CAACG,OAAO,CAACG,YAAY,CAC5D,IACDP,KAAK,CAACH,KAAK,CAACW,MAAM,KAAK,CAAC,EACxB;QACA,MAAMC,iBAAiB,GAAGT,KAAK,CAACH,KAAK,CAACa,SAAS,CAC5CJ,IAAI,IAAKA,IAAI,CAACK,GAAG,KAAKV,MAAM,CAACG,OAAO,CAACO,GAAG,CAC1C;QACD,IAAIF,iBAAiB,GAAG,CAAC,CAAC,EAAE;UAC1BT,KAAK,CAACH,KAAK,CAACY,iBAAiB,CAAC,CAACG,MAAM,IAAIX,MAAM,CAACG,OAAO,CAACQ,MAAM;QAChE,CAAC,MAAM;UACL,IAAIC,IAAI,GAAGb,KAAK,CAACH,KAAK;UACtBgB,IAAI,CAACC,IAAI,CAACb,MAAM,CAACG,OAAO,CAAC;UACzBJ,KAAK,CAACH,KAAK,GAAGgB,IAAI;QACpB;MACF,CAAC,MAAM;QACL,MAAME,KAAK,CAAC,yBAAyB,CAAC;MACxC;IACF,CAAC;IACDC,UAAU,EAAGhB,KAAyB,IAAK;MACzCA,KAAK,CAACH,KAAK,GAAG,EAAE;IAClB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEE,cAAc;EAAEiB;AAAW,CAAC,GAAGtB,UAAU,CAACuB,OAAO;AAEhE,eAAevB,UAAU,CAACwB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}