{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const orderSlice = createSlice({\n  name: \"order\",\n  initialState: {\n    value: []\n  },\n  reducers: {\n    addDishToOrder: (state, action) => {\n      if (state.value.every(dish => dish.restaurantId === action.payload.restaurantId) || state.value.length === 0) {\n        let copiedDish = state.value.findIndex(dish => dish._id === action.payload._id);\n        copiedDish ? state.value[copiedDish].amount += action.payload.amount : state.value.push(action.payload);\n      } else {\n        throw Error(\"not the same restaurant\");\n      }\n      console.log(state.value);\n    },\n    cleanOrder: state => {\n      state.value = [];\n    }\n  }\n});\nexport const {\n  addDishToOrder,\n  cleanOrder\n} = orderSlice.actions;\nexport default orderSlice.reducer;","map":{"version":3,"names":["createSlice","orderSlice","name","initialState","value","reducers","addDishToOrder","state","action","every","dish","restaurantId","payload","length","copiedDish","findIndex","_id","amount","push","Error","console","log","cleanOrder","actions","reducer"],"sources":["C:/Users/User/OneDrive/שולחן העבודה/full stack curse/epicure/src/data/orderSlicer.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { IDish, IDishOrder } from \"../component/Types/Interfaces/IDishCard\";\r\nexport interface IOrderState {\r\n  value: IDishOrder[];\r\n}\r\nexport const orderSlice = createSlice({\r\n  name: \"order\",\r\n  initialState: {\r\n    value: [],\r\n  },\r\n  reducers: {\r\n    addDishToOrder: (\r\n      state: { value: IDishOrder[] },\r\n      action: { payload: IDishOrder }\r\n    ) => {\r\n      if (\r\n        state.value.every(\r\n          (dish) => dish.restaurantId === action.payload.restaurantId\r\n        ) ||\r\n        state.value.length === 0\r\n      ) {\r\n        let copiedDish = state.value.findIndex(\r\n          (dish) => dish._id === action.payload._id\r\n        );\r\n        copiedDish\r\n          ? (state.value[copiedDish].amount += action.payload.amount)\r\n          : state.value.push(action.payload);\r\n      } else {\r\n        throw Error(\"not the same restaurant\");\r\n      }\r\n      console.log(state.value);\r\n    },\r\n    cleanOrder: (state: { value: IDish[] }) => {\r\n      state.value = [];\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addDishToOrder, cleanOrder } = orderSlice.actions;\r\n\r\nexport default orderSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAK9C,OAAO,MAAMC,UAAU,GAAGD,WAAW,CAAC;EACpCE,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACRC,cAAc,EAAE,CACdC,KAA8B,EAC9BC,MAA+B,KAC5B;MACH,IACED,KAAK,CAACH,KAAK,CAACK,KAAK,CACdC,IAAI,IAAKA,IAAI,CAACC,YAAY,KAAKH,MAAM,CAACI,OAAO,CAACD,YAAY,CAC5D,IACDJ,KAAK,CAACH,KAAK,CAACS,MAAM,KAAK,CAAC,EACxB;QACA,IAAIC,UAAU,GAAGP,KAAK,CAACH,KAAK,CAACW,SAAS,CACnCL,IAAI,IAAKA,IAAI,CAACM,GAAG,KAAKR,MAAM,CAACI,OAAO,CAACI,GAAG,CAC1C;QACDF,UAAU,GACLP,KAAK,CAACH,KAAK,CAACU,UAAU,CAAC,CAACG,MAAM,IAAIT,MAAM,CAACI,OAAO,CAACK,MAAM,GACxDV,KAAK,CAACH,KAAK,CAACc,IAAI,CAACV,MAAM,CAACI,OAAO,CAAC;MACtC,CAAC,MAAM;QACL,MAAMO,KAAK,CAAC,yBAAyB,CAAC;MACxC;MACAC,OAAO,CAACC,GAAG,CAACd,KAAK,CAACH,KAAK,CAAC;IAC1B,CAAC;IACDkB,UAAU,EAAGf,KAAyB,IAAK;MACzCA,KAAK,CAACH,KAAK,GAAG,EAAE;IAClB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEE,cAAc;EAAEgB;AAAW,CAAC,GAAGrB,UAAU,CAACsB,OAAO;AAEhE,eAAetB,UAAU,CAACuB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}